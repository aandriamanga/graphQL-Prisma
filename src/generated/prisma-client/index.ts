// Code generated by Prisma (prisma@1.26.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  account: (where?: AccountWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  person: (where?: PersonWhereInput) => Promise<boolean>;
  project: (where?: ProjectWhereInput) => Promise<boolean>;
  projectRight: (where?: ProjectRightWhereInput) => Promise<boolean>;
  submessage: (where?: SubmessageWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  account: (where: AccountWhereUniqueInput) => AccountPromise;
  accounts: (args?: {
    where?: AccountWhereInput;
    orderBy?: AccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Account>;
  accountsConnection: (args?: {
    where?: AccountWhereInput;
    orderBy?: AccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AccountConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessagePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  person: (where: PersonWhereUniqueInput) => PersonPromise;
  persons: (args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Person>;
  personsConnection: (args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PersonConnectionPromise;
  project: (where: ProjectWhereUniqueInput) => ProjectPromise;
  projects: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Project>;
  projectsConnection: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectConnectionPromise;
  projectRights: (args?: {
    where?: ProjectRightWhereInput;
    orderBy?: ProjectRightOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProjectRight>;
  projectRightsConnection: (args?: {
    where?: ProjectRightWhereInput;
    orderBy?: ProjectRightOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectRightConnectionPromise;
  submessage: (where: SubmessageWhereUniqueInput) => SubmessagePromise;
  submessages: (args?: {
    where?: SubmessageWhereInput;
    orderBy?: SubmessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Submessage>;
  submessagesConnection: (args?: {
    where?: SubmessageWhereInput;
    orderBy?: SubmessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SubmessageConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAccount: (data: AccountCreateInput) => AccountPromise;
  updateAccount: (args: {
    data: AccountUpdateInput;
    where: AccountWhereUniqueInput;
  }) => AccountPromise;
  updateManyAccounts: (args: {
    data: AccountUpdateManyMutationInput;
    where?: AccountWhereInput;
  }) => BatchPayloadPromise;
  upsertAccount: (args: {
    where: AccountWhereUniqueInput;
    create: AccountCreateInput;
    update: AccountUpdateInput;
  }) => AccountPromise;
  deleteAccount: (where: AccountWhereUniqueInput) => AccountPromise;
  deleteManyAccounts: (where?: AccountWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createPerson: (data: PersonCreateInput) => PersonPromise;
  updatePerson: (args: {
    data: PersonUpdateInput;
    where: PersonWhereUniqueInput;
  }) => PersonPromise;
  updateManyPersons: (args: {
    data: PersonUpdateManyMutationInput;
    where?: PersonWhereInput;
  }) => BatchPayloadPromise;
  upsertPerson: (args: {
    where: PersonWhereUniqueInput;
    create: PersonCreateInput;
    update: PersonUpdateInput;
  }) => PersonPromise;
  deletePerson: (where: PersonWhereUniqueInput) => PersonPromise;
  deleteManyPersons: (where?: PersonWhereInput) => BatchPayloadPromise;
  createProject: (data: ProjectCreateInput) => ProjectPromise;
  updateProject: (args: {
    data: ProjectUpdateInput;
    where: ProjectWhereUniqueInput;
  }) => ProjectPromise;
  updateManyProjects: (args: {
    data: ProjectUpdateManyMutationInput;
    where?: ProjectWhereInput;
  }) => BatchPayloadPromise;
  upsertProject: (args: {
    where: ProjectWhereUniqueInput;
    create: ProjectCreateInput;
    update: ProjectUpdateInput;
  }) => ProjectPromise;
  deleteProject: (where: ProjectWhereUniqueInput) => ProjectPromise;
  deleteManyProjects: (where?: ProjectWhereInput) => BatchPayloadPromise;
  createProjectRight: (data: ProjectRightCreateInput) => ProjectRightPromise;
  updateManyProjectRights: (args: {
    data: ProjectRightUpdateManyMutationInput;
    where?: ProjectRightWhereInput;
  }) => BatchPayloadPromise;
  deleteManyProjectRights: (
    where?: ProjectRightWhereInput
  ) => BatchPayloadPromise;
  createSubmessage: (data: SubmessageCreateInput) => SubmessagePromise;
  updateSubmessage: (args: {
    data: SubmessageUpdateInput;
    where: SubmessageWhereUniqueInput;
  }) => SubmessagePromise;
  updateManySubmessages: (args: {
    data: SubmessageUpdateManyMutationInput;
    where?: SubmessageWhereInput;
  }) => BatchPayloadPromise;
  upsertSubmessage: (args: {
    where: SubmessageWhereUniqueInput;
    create: SubmessageCreateInput;
    update: SubmessageUpdateInput;
  }) => SubmessagePromise;
  deleteSubmessage: (where: SubmessageWhereUniqueInput) => SubmessagePromise;
  deleteManySubmessages: (where?: SubmessageWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  account: (
    where?: AccountSubscriptionWhereInput
  ) => AccountSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  person: (
    where?: PersonSubscriptionWhereInput
  ) => PersonSubscriptionPayloadSubscription;
  project: (
    where?: ProjectSubscriptionWhereInput
  ) => ProjectSubscriptionPayloadSubscription;
  projectRight: (
    where?: ProjectRightSubscriptionWhereInput
  ) => ProjectRightSubscriptionPayloadSubscription;
  submessage: (
    where?: SubmessageSubscriptionWhereInput
  ) => SubmessageSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "clientId_ASC"
  | "clientId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "receivedAt_ASC"
  | "receivedAt_DESC"
  | "_projectId_ASC"
  | "_projectId_DESC"
  | "integration_url_ASC"
  | "integration_url_DESC"
  | "integration_id_ASC"
  | "integration_id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC"
  | "channel_ASC"
  | "channel_DESC"
  | "read_ASC"
  | "read_DESC"
  | "updated_ASC"
  | "updated_DESC"
  | "archived_ASC"
  | "archived_DESC"
  | "processed_ASC"
  | "processed_DESC";

export type RIGHT = "ADMIN" | "AGENT" | "VIEWER";

export type PERSON_TYPE = "COLLABORATOR" | "CUSTOMER";

export type MESSAGE_TYPE = "NOTE" | "MESSAGE";

export type CHANNEL =
  | "NOTE"
  | "INTERCOM"
  | "MAIL"
  | "SLACK"
  | "ZENDESK"
  | "SHEET"
  | "FORM";

export type AccountOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "clientId_ASC"
  | "clientId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "lastSeenAt_ASC"
  | "lastSeenAt_DESC"
  | "deletedAt_ASC"
  | "deletedAt_DESC"
  | "reset_password_token_ASC"
  | "reset_password_token_DESC"
  | "reset_password_exp_date_ASC"
  | "reset_password_exp_date_DESC"
  | "username_ASC"
  | "username_DESC"
  | "hash_ASC"
  | "hash_DESC"
  | "need_onboarding_ASC"
  | "need_onboarding_DESC"
  | "email_validated_ASC"
  | "email_validated_DESC"
  | "emailConfirmToken_ASC"
  | "emailConfirmToken_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type SubmessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "clientId_ASC"
  | "clientId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "receivedAt_ASC"
  | "receivedAt_DESC"
  | "integration_id_ASC"
  | "integration_id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "content_ASC"
  | "content_DESC";

export type PersonOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "clientId_ASC"
  | "clientId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "_projectId_ASC"
  | "_projectId_DESC"
  | "deleted_ASC"
  | "deleted_DESC"
  | "type_ASC"
  | "type_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "details_ASC"
  | "details_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "zendesk_url_ASC"
  | "zendesk_url_DESC";

export type ProjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "clientId_ASC"
  | "clientId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC";

export type ProjectRightOrderByInput =
  | "right_ASC"
  | "right_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface AccountUpdateManyWithoutProjectInput {
  create?:
    | AccountCreateWithoutProjectInput[]
    | AccountCreateWithoutProjectInput;
  delete?: AccountWhereUniqueInput[] | AccountWhereUniqueInput;
  connect?: AccountWhereUniqueInput[] | AccountWhereUniqueInput;
  set?: AccountWhereUniqueInput[] | AccountWhereUniqueInput;
  disconnect?: AccountWhereUniqueInput[] | AccountWhereUniqueInput;
  update?:
    | AccountUpdateWithWhereUniqueWithoutProjectInput[]
    | AccountUpdateWithWhereUniqueWithoutProjectInput;
  upsert?:
    | AccountUpsertWithWhereUniqueWithoutProjectInput[]
    | AccountUpsertWithWhereUniqueWithoutProjectInput;
  deleteMany?: AccountScalarWhereInput[] | AccountScalarWhereInput;
  updateMany?:
    | AccountUpdateManyWithWhereNestedInput[]
    | AccountUpdateManyWithWhereNestedInput;
}

export type AccountWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  clientId?: ID_Input;
  username?: String;
}>;

export interface AccountCreateWithoutPersonInput {
  clientId?: ID_Input;
  lastSeenAt: DateTimeInput;
  deletedAt?: DateTimeInput;
  project: ProjectCreateOneWithoutAccountsInput;
  reset_password_token?: String;
  reset_password_exp_date?: DateTimeInput;
  username: String;
  hash: String;
  need_onboarding?: Boolean;
  email_validated?: Boolean;
  emailConfirmToken?: String;
}

export interface SubmessageUpdateManyDataInput {
  clientId?: ID_Input;
  receivedAt?: DateTimeInput;
  integration_id?: String;
  type?: MESSAGE_TYPE;
  content?: String;
}

export interface AccountUpdateInput {
  clientId?: ID_Input;
  lastSeenAt?: DateTimeInput;
  deletedAt?: DateTimeInput;
  project?: ProjectUpdateOneRequiredWithoutAccountsInput;
  person?: PersonUpdateOneRequiredWithoutAccountInput;
  reset_password_token?: String;
  reset_password_exp_date?: DateTimeInput;
  username?: String;
  hash?: String;
  need_onboarding?: Boolean;
  email_validated?: Boolean;
  emailConfirmToken?: String;
}

export interface ProjectUpdateOneRequiredInput {
  create?: ProjectCreateInput;
  update?: ProjectUpdateDataInput;
  upsert?: ProjectUpsertNestedInput;
  connect?: ProjectWhereUniqueInput;
}

export interface ProjectUpdateOneRequiredWithoutAccountsInput {
  create?: ProjectCreateWithoutAccountsInput;
  update?: ProjectUpdateWithoutAccountsDataInput;
  upsert?: ProjectUpsertWithoutAccountsInput;
  connect?: ProjectWhereUniqueInput;
}

export interface SubmessageWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  clientId?: ID_Input;
  clientId_not?: ID_Input;
  clientId_in?: ID_Input[] | ID_Input;
  clientId_not_in?: ID_Input[] | ID_Input;
  clientId_lt?: ID_Input;
  clientId_lte?: ID_Input;
  clientId_gt?: ID_Input;
  clientId_gte?: ID_Input;
  clientId_contains?: ID_Input;
  clientId_not_contains?: ID_Input;
  clientId_starts_with?: ID_Input;
  clientId_not_starts_with?: ID_Input;
  clientId_ends_with?: ID_Input;
  clientId_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  receivedAt?: DateTimeInput;
  receivedAt_not?: DateTimeInput;
  receivedAt_in?: DateTimeInput[] | DateTimeInput;
  receivedAt_not_in?: DateTimeInput[] | DateTimeInput;
  receivedAt_lt?: DateTimeInput;
  receivedAt_lte?: DateTimeInput;
  receivedAt_gt?: DateTimeInput;
  receivedAt_gte?: DateTimeInput;
  message?: MessageWhereInput;
  submitter?: PersonWhereInput;
  integration_id?: String;
  integration_id_not?: String;
  integration_id_in?: String[] | String;
  integration_id_not_in?: String[] | String;
  integration_id_lt?: String;
  integration_id_lte?: String;
  integration_id_gt?: String;
  integration_id_gte?: String;
  integration_id_contains?: String;
  integration_id_not_contains?: String;
  integration_id_starts_with?: String;
  integration_id_not_starts_with?: String;
  integration_id_ends_with?: String;
  integration_id_not_ends_with?: String;
  type?: MESSAGE_TYPE;
  type_not?: MESSAGE_TYPE;
  type_in?: MESSAGE_TYPE[] | MESSAGE_TYPE;
  type_not_in?: MESSAGE_TYPE[] | MESSAGE_TYPE;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  AND?: SubmessageWhereInput[] | SubmessageWhereInput;
  OR?: SubmessageWhereInput[] | SubmessageWhereInput;
  NOT?: SubmessageWhereInput[] | SubmessageWhereInput;
}

export interface ProjectUpdateWithoutAccountsDataInput {
  clientId?: ID_Input;
  messages?: MessageUpdateManyWithoutProjectInput;
  persons?: PersonUpdateManyWithoutProjectInput;
  name?: String;
}

export interface SubmessageSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SubmessageWhereInput;
  AND?: SubmessageSubscriptionWhereInput[] | SubmessageSubscriptionWhereInput;
  OR?: SubmessageSubscriptionWhereInput[] | SubmessageSubscriptionWhereInput;
  NOT?: SubmessageSubscriptionWhereInput[] | SubmessageSubscriptionWhereInput;
}

export interface MessageUpdateManyWithoutProjectInput {
  create?:
    | MessageCreateWithoutProjectInput[]
    | MessageCreateWithoutProjectInput;
  delete?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  set?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  disconnect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  update?:
    | MessageUpdateWithWhereUniqueWithoutProjectInput[]
    | MessageUpdateWithWhereUniqueWithoutProjectInput;
  upsert?:
    | MessageUpsertWithWhereUniqueWithoutProjectInput[]
    | MessageUpsertWithWhereUniqueWithoutProjectInput;
  deleteMany?: MessageScalarWhereInput[] | MessageScalarWhereInput;
  updateMany?:
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput;
}

export interface ProjectRightSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProjectRightWhereInput;
  AND?:
    | ProjectRightSubscriptionWhereInput[]
    | ProjectRightSubscriptionWhereInput;
  OR?:
    | ProjectRightSubscriptionWhereInput[]
    | ProjectRightSubscriptionWhereInput;
  NOT?:
    | ProjectRightSubscriptionWhereInput[]
    | ProjectRightSubscriptionWhereInput;
}

export interface MessageUpdateWithWhereUniqueWithoutProjectInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutProjectDataInput;
}

export interface ProjectSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProjectWhereInput;
  AND?: ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput;
  OR?: ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput;
  NOT?: ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput;
}

export interface MessageUpdateWithoutProjectDataInput {
  clientId?: ID_Input;
  receivedAt?: DateTimeInput;
  _projectId?: ID_Input;
  sub_messages?: SubmessageUpdateManyWithoutMessageInput;
  submitter?: PersonUpdateOneRequiredWithoutSubmitted_messagesInput;
  requester?: PersonUpdateOneWithoutRequested_messagesInput;
  ccs?: PersonUpdateManyWithoutCc_messagesInput;
  integration_url?: String;
  integration_id?: String;
  title?: String;
  content?: String;
  channel?: CHANNEL;
  read?: Boolean;
  updated?: Boolean;
  archived?: Boolean;
  processed?: Boolean;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MessageWhereInput;
  AND?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
  OR?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
  NOT?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
}

export interface SubmessageUpdateManyWithoutMessageInput {
  create?:
    | SubmessageCreateWithoutMessageInput[]
    | SubmessageCreateWithoutMessageInput;
  delete?: SubmessageWhereUniqueInput[] | SubmessageWhereUniqueInput;
  connect?: SubmessageWhereUniqueInput[] | SubmessageWhereUniqueInput;
  set?: SubmessageWhereUniqueInput[] | SubmessageWhereUniqueInput;
  disconnect?: SubmessageWhereUniqueInput[] | SubmessageWhereUniqueInput;
  update?:
    | SubmessageUpdateWithWhereUniqueWithoutMessageInput[]
    | SubmessageUpdateWithWhereUniqueWithoutMessageInput;
  upsert?:
    | SubmessageUpsertWithWhereUniqueWithoutMessageInput[]
    | SubmessageUpsertWithWhereUniqueWithoutMessageInput;
  deleteMany?: SubmessageScalarWhereInput[] | SubmessageScalarWhereInput;
  updateMany?:
    | SubmessageUpdateManyWithWhereNestedInput[]
    | SubmessageUpdateManyWithWhereNestedInput;
}

export interface SubmessageUpdateManyMutationInput {
  clientId?: ID_Input;
  receivedAt?: DateTimeInput;
  integration_id?: String;
  type?: MESSAGE_TYPE;
  content?: String;
}

export interface SubmessageUpdateWithWhereUniqueWithoutMessageInput {
  where: SubmessageWhereUniqueInput;
  data: SubmessageUpdateWithoutMessageDataInput;
}

export interface MessageUpdateWithoutSub_messagesDataInput {
  clientId?: ID_Input;
  receivedAt?: DateTimeInput;
  _projectId?: ID_Input;
  project?: ProjectUpdateOneRequiredWithoutMessagesInput;
  submitter?: PersonUpdateOneRequiredWithoutSubmitted_messagesInput;
  requester?: PersonUpdateOneWithoutRequested_messagesInput;
  ccs?: PersonUpdateManyWithoutCc_messagesInput;
  integration_url?: String;
  integration_id?: String;
  title?: String;
  content?: String;
  channel?: CHANNEL;
  read?: Boolean;
  updated?: Boolean;
  archived?: Boolean;
  processed?: Boolean;
}

export interface SubmessageUpdateWithoutMessageDataInput {
  clientId?: ID_Input;
  receivedAt?: DateTimeInput;
  submitter?: PersonUpdateOneRequiredInput;
  integration_id?: String;
  type?: MESSAGE_TYPE;
  content?: String;
}

export type MessageWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  clientId?: ID_Input;
}>;

export interface PersonUpdateOneRequiredInput {
  create?: PersonCreateInput;
  update?: PersonUpdateDataInput;
  upsert?: PersonUpsertNestedInput;
  connect?: PersonWhereUniqueInput;
}

export interface MessageCreateWithoutSub_messagesInput {
  clientId?: ID_Input;
  receivedAt?: DateTimeInput;
  _projectId?: ID_Input;
  project: ProjectCreateOneWithoutMessagesInput;
  submitter: PersonCreateOneWithoutSubmitted_messagesInput;
  requester?: PersonCreateOneWithoutRequested_messagesInput;
  ccs?: PersonCreateManyWithoutCc_messagesInput;
  integration_url?: String;
  integration_id?: String;
  title?: String;
  content?: String;
  channel?: CHANNEL;
  read?: Boolean;
  updated?: Boolean;
  archived?: Boolean;
  processed?: Boolean;
}

export interface PersonUpdateDataInput {
  clientId?: ID_Input;
  _projectId?: ID_Input;
  project?: ProjectUpdateOneRequiredWithoutPersonsInput;
  right?: ProjectRightUpdateOneWithoutPersonInput;
  submitted_messages?: MessageUpdateManyWithoutSubmitterInput;
  requested_messages?: MessageUpdateManyWithoutRequesterInput;
  cc_messages?: MessageUpdateManyWithoutCcsInput;
  account?: AccountUpdateOneWithoutPersonInput;
  deleted?: Boolean;
  type?: PERSON_TYPE;
  name?: String;
  email?: String;
  details?: String;
  phone?: String;
  zendesk_url?: String;
}

export type PersonWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  clientId?: ID_Input;
}>;

export interface ProjectUpdateOneRequiredWithoutPersonsInput {
  create?: ProjectCreateWithoutPersonsInput;
  update?: ProjectUpdateWithoutPersonsDataInput;
  upsert?: ProjectUpsertWithoutPersonsInput;
  connect?: ProjectWhereUniqueInput;
}

export interface ProjectRightUpdateManyMutationInput {
  right?: RIGHT;
}

export interface ProjectUpdateWithoutPersonsDataInput {
  clientId?: ID_Input;
  accounts?: AccountUpdateManyWithoutProjectInput;
  messages?: MessageUpdateManyWithoutProjectInput;
  name?: String;
}

export type ProjectWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  clientId?: ID_Input;
  name?: String;
}>;

export interface MessageUpsertWithWhereUniqueWithoutProjectInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutProjectDataInput;
  create: MessageCreateWithoutProjectInput;
}

export interface ProjectRightCreateInput {
  project: ProjectCreateOneInput;
  right: RIGHT;
  person?: PersonCreateOneWithoutRightInput;
}

export interface AccountUpdateWithWhereUniqueWithoutProjectInput {
  where: AccountWhereUniqueInput;
  data: AccountUpdateWithoutProjectDataInput;
}

export interface ProjectUpdateInput {
  clientId?: ID_Input;
  accounts?: AccountUpdateManyWithoutProjectInput;
  messages?: MessageUpdateManyWithoutProjectInput;
  persons?: PersonUpdateManyWithoutProjectInput;
  name?: String;
}

export interface AccountUpdateWithoutProjectDataInput {
  clientId?: ID_Input;
  lastSeenAt?: DateTimeInput;
  deletedAt?: DateTimeInput;
  person?: PersonUpdateOneRequiredWithoutAccountInput;
  reset_password_token?: String;
  reset_password_exp_date?: DateTimeInput;
  username?: String;
  hash?: String;
  need_onboarding?: Boolean;
  email_validated?: Boolean;
  emailConfirmToken?: String;
}

export interface PersonUpdateInput {
  clientId?: ID_Input;
  _projectId?: ID_Input;
  project?: ProjectUpdateOneRequiredWithoutPersonsInput;
  right?: ProjectRightUpdateOneWithoutPersonInput;
  submitted_messages?: MessageUpdateManyWithoutSubmitterInput;
  requested_messages?: MessageUpdateManyWithoutRequesterInput;
  cc_messages?: MessageUpdateManyWithoutCcsInput;
  account?: AccountUpdateOneWithoutPersonInput;
  deleted?: Boolean;
  type?: PERSON_TYPE;
  name?: String;
  email?: String;
  details?: String;
  phone?: String;
  zendesk_url?: String;
}

export interface PersonUpdateOneRequiredWithoutAccountInput {
  create?: PersonCreateWithoutAccountInput;
  update?: PersonUpdateWithoutAccountDataInput;
  upsert?: PersonUpsertWithoutAccountInput;
  connect?: PersonWhereUniqueInput;
}

export interface MessageUpdateInput {
  clientId?: ID_Input;
  receivedAt?: DateTimeInput;
  _projectId?: ID_Input;
  project?: ProjectUpdateOneRequiredWithoutMessagesInput;
  sub_messages?: SubmessageUpdateManyWithoutMessageInput;
  submitter?: PersonUpdateOneRequiredWithoutSubmitted_messagesInput;
  requester?: PersonUpdateOneWithoutRequested_messagesInput;
  ccs?: PersonUpdateManyWithoutCc_messagesInput;
  integration_url?: String;
  integration_id?: String;
  title?: String;
  content?: String;
  channel?: CHANNEL;
  read?: Boolean;
  updated?: Boolean;
  archived?: Boolean;
  processed?: Boolean;
}

export interface PersonUpdateWithoutAccountDataInput {
  clientId?: ID_Input;
  _projectId?: ID_Input;
  project?: ProjectUpdateOneRequiredWithoutPersonsInput;
  right?: ProjectRightUpdateOneWithoutPersonInput;
  submitted_messages?: MessageUpdateManyWithoutSubmitterInput;
  requested_messages?: MessageUpdateManyWithoutRequesterInput;
  cc_messages?: MessageUpdateManyWithoutCcsInput;
  deleted?: Boolean;
  type?: PERSON_TYPE;
  name?: String;
  email?: String;
  details?: String;
  phone?: String;
  zendesk_url?: String;
}

export interface MessageCreateInput {
  clientId?: ID_Input;
  receivedAt?: DateTimeInput;
  _projectId?: ID_Input;
  project: ProjectCreateOneWithoutMessagesInput;
  sub_messages?: SubmessageCreateManyWithoutMessageInput;
  submitter: PersonCreateOneWithoutSubmitted_messagesInput;
  requester?: PersonCreateOneWithoutRequested_messagesInput;
  ccs?: PersonCreateManyWithoutCc_messagesInput;
  integration_url?: String;
  integration_id?: String;
  title?: String;
  content?: String;
  channel?: CHANNEL;
  read?: Boolean;
  updated?: Boolean;
  archived?: Boolean;
  processed?: Boolean;
}

export interface ProjectRightUpdateOneWithoutPersonInput {
  create?: ProjectRightCreateWithoutPersonInput;
  update?: ProjectRightUpdateWithoutPersonDataInput;
  upsert?: ProjectRightUpsertWithoutPersonInput;
  delete?: Boolean;
  disconnect?: Boolean;
}

export interface ProjectUpsertWithoutAccountsInput {
  update: ProjectUpdateWithoutAccountsDataInput;
  create: ProjectCreateWithoutAccountsInput;
}

export interface ProjectRightUpdateWithoutPersonDataInput {
  project?: ProjectUpdateOneRequiredInput;
  right?: RIGHT;
}

export interface AccountCreateInput {
  clientId?: ID_Input;
  lastSeenAt: DateTimeInput;
  deletedAt?: DateTimeInput;
  project: ProjectCreateOneWithoutAccountsInput;
  person: PersonCreateOneWithoutAccountInput;
  reset_password_token?: String;
  reset_password_exp_date?: DateTimeInput;
  username: String;
  hash: String;
  need_onboarding?: Boolean;
  email_validated?: Boolean;
  emailConfirmToken?: String;
}

export interface ProjectRightWhereInput {
  project?: ProjectWhereInput;
  right?: RIGHT;
  right_not?: RIGHT;
  right_in?: RIGHT[] | RIGHT;
  right_not_in?: RIGHT[] | RIGHT;
  person?: PersonWhereInput;
  AND?: ProjectRightWhereInput[] | ProjectRightWhereInput;
  OR?: ProjectRightWhereInput[] | ProjectRightWhereInput;
  NOT?: ProjectRightWhereInput[] | ProjectRightWhereInput;
}

export interface ProjectCreateWithoutAccountsInput {
  clientId?: ID_Input;
  messages?: MessageCreateManyWithoutProjectInput;
  persons?: PersonCreateManyWithoutProjectInput;
  name: String;
}

export interface ProjectUpdateDataInput {
  clientId?: ID_Input;
  accounts?: AccountUpdateManyWithoutProjectInput;
  messages?: MessageUpdateManyWithoutProjectInput;
  persons?: PersonUpdateManyWithoutProjectInput;
  name?: String;
}

export interface MessageCreateWithoutProjectInput {
  clientId?: ID_Input;
  receivedAt?: DateTimeInput;
  _projectId?: ID_Input;
  sub_messages?: SubmessageCreateManyWithoutMessageInput;
  submitter: PersonCreateOneWithoutSubmitted_messagesInput;
  requester?: PersonCreateOneWithoutRequested_messagesInput;
  ccs?: PersonCreateManyWithoutCc_messagesInput;
  integration_url?: String;
  integration_id?: String;
  title?: String;
  content?: String;
  channel?: CHANNEL;
  read?: Boolean;
  updated?: Boolean;
  archived?: Boolean;
  processed?: Boolean;
}

export interface PersonUpdateManyWithoutProjectInput {
  create?: PersonCreateWithoutProjectInput[] | PersonCreateWithoutProjectInput;
  delete?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
  connect?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
  set?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
  disconnect?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
  update?:
    | PersonUpdateWithWhereUniqueWithoutProjectInput[]
    | PersonUpdateWithWhereUniqueWithoutProjectInput;
  upsert?:
    | PersonUpsertWithWhereUniqueWithoutProjectInput[]
    | PersonUpsertWithWhereUniqueWithoutProjectInput;
  deleteMany?: PersonScalarWhereInput[] | PersonScalarWhereInput;
  updateMany?:
    | PersonUpdateManyWithWhereNestedInput[]
    | PersonUpdateManyWithWhereNestedInput;
}

export interface SubmessageCreateWithoutMessageInput {
  clientId?: ID_Input;
  receivedAt?: DateTimeInput;
  submitter: PersonCreateOneInput;
  integration_id?: String;
  type?: MESSAGE_TYPE;
  content?: String;
}

export interface PersonUpdateWithWhereUniqueWithoutProjectInput {
  where: PersonWhereUniqueInput;
  data: PersonUpdateWithoutProjectDataInput;
}

export interface PersonCreateInput {
  clientId?: ID_Input;
  _projectId?: ID_Input;
  project: ProjectCreateOneWithoutPersonsInput;
  right?: ProjectRightCreateOneWithoutPersonInput;
  submitted_messages?: MessageCreateManyWithoutSubmitterInput;
  requested_messages?: MessageCreateManyWithoutRequesterInput;
  cc_messages?: MessageCreateManyWithoutCcsInput;
  account?: AccountCreateOneWithoutPersonInput;
  deleted?: Boolean;
  type?: PERSON_TYPE;
  name: String;
  email?: String;
  details?: String;
  phone?: String;
  zendesk_url?: String;
}

export interface PersonUpdateWithoutProjectDataInput {
  clientId?: ID_Input;
  _projectId?: ID_Input;
  right?: ProjectRightUpdateOneWithoutPersonInput;
  submitted_messages?: MessageUpdateManyWithoutSubmitterInput;
  requested_messages?: MessageUpdateManyWithoutRequesterInput;
  cc_messages?: MessageUpdateManyWithoutCcsInput;
  account?: AccountUpdateOneWithoutPersonInput;
  deleted?: Boolean;
  type?: PERSON_TYPE;
  name?: String;
  email?: String;
  details?: String;
  phone?: String;
  zendesk_url?: String;
}

export interface ProjectCreateWithoutPersonsInput {
  clientId?: ID_Input;
  accounts?: AccountCreateManyWithoutProjectInput;
  messages?: MessageCreateManyWithoutProjectInput;
  name: String;
}

export interface MessageUpdateManyWithoutSubmitterInput {
  create?:
    | MessageCreateWithoutSubmitterInput[]
    | MessageCreateWithoutSubmitterInput;
  delete?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  set?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  disconnect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  update?:
    | MessageUpdateWithWhereUniqueWithoutSubmitterInput[]
    | MessageUpdateWithWhereUniqueWithoutSubmitterInput;
  upsert?:
    | MessageUpsertWithWhereUniqueWithoutSubmitterInput[]
    | MessageUpsertWithWhereUniqueWithoutSubmitterInput;
  deleteMany?: MessageScalarWhereInput[] | MessageScalarWhereInput;
  updateMany?:
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput;
}

export interface AccountCreateWithoutProjectInput {
  clientId?: ID_Input;
  lastSeenAt: DateTimeInput;
  deletedAt?: DateTimeInput;
  person: PersonCreateOneWithoutAccountInput;
  reset_password_token?: String;
  reset_password_exp_date?: DateTimeInput;
  username: String;
  hash: String;
  need_onboarding?: Boolean;
  email_validated?: Boolean;
  emailConfirmToken?: String;
}

export interface MessageUpdateWithWhereUniqueWithoutSubmitterInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutSubmitterDataInput;
}

export interface PersonCreateWithoutAccountInput {
  clientId?: ID_Input;
  _projectId?: ID_Input;
  project: ProjectCreateOneWithoutPersonsInput;
  right?: ProjectRightCreateOneWithoutPersonInput;
  submitted_messages?: MessageCreateManyWithoutSubmitterInput;
  requested_messages?: MessageCreateManyWithoutRequesterInput;
  cc_messages?: MessageCreateManyWithoutCcsInput;
  deleted?: Boolean;
  type?: PERSON_TYPE;
  name: String;
  email?: String;
  details?: String;
  phone?: String;
  zendesk_url?: String;
}

export interface MessageUpdateWithoutSubmitterDataInput {
  clientId?: ID_Input;
  receivedAt?: DateTimeInput;
  _projectId?: ID_Input;
  project?: ProjectUpdateOneRequiredWithoutMessagesInput;
  sub_messages?: SubmessageUpdateManyWithoutMessageInput;
  requester?: PersonUpdateOneWithoutRequested_messagesInput;
  ccs?: PersonUpdateManyWithoutCc_messagesInput;
  integration_url?: String;
  integration_id?: String;
  title?: String;
  content?: String;
  channel?: CHANNEL;
  read?: Boolean;
  updated?: Boolean;
  archived?: Boolean;
  processed?: Boolean;
}

export interface ProjectRightCreateWithoutPersonInput {
  project: ProjectCreateOneInput;
  right: RIGHT;
}

export interface ProjectUpdateOneRequiredWithoutMessagesInput {
  create?: ProjectCreateWithoutMessagesInput;
  update?: ProjectUpdateWithoutMessagesDataInput;
  upsert?: ProjectUpsertWithoutMessagesInput;
  connect?: ProjectWhereUniqueInput;
}

export interface ProjectCreateInput {
  clientId?: ID_Input;
  accounts?: AccountCreateManyWithoutProjectInput;
  messages?: MessageCreateManyWithoutProjectInput;
  persons?: PersonCreateManyWithoutProjectInput;
  name: String;
}

export interface ProjectUpdateWithoutMessagesDataInput {
  clientId?: ID_Input;
  accounts?: AccountUpdateManyWithoutProjectInput;
  persons?: PersonUpdateManyWithoutProjectInput;
  name?: String;
}

export interface PersonCreateWithoutProjectInput {
  clientId?: ID_Input;
  _projectId?: ID_Input;
  right?: ProjectRightCreateOneWithoutPersonInput;
  submitted_messages?: MessageCreateManyWithoutSubmitterInput;
  requested_messages?: MessageCreateManyWithoutRequesterInput;
  cc_messages?: MessageCreateManyWithoutCcsInput;
  account?: AccountCreateOneWithoutPersonInput;
  deleted?: Boolean;
  type?: PERSON_TYPE;
  name: String;
  email?: String;
  details?: String;
  phone?: String;
  zendesk_url?: String;
}

export interface ProjectUpsertWithoutMessagesInput {
  update: ProjectUpdateWithoutMessagesDataInput;
  create: ProjectCreateWithoutMessagesInput;
}

export interface MessageCreateWithoutSubmitterInput {
  clientId?: ID_Input;
  receivedAt?: DateTimeInput;
  _projectId?: ID_Input;
  project: ProjectCreateOneWithoutMessagesInput;
  sub_messages?: SubmessageCreateManyWithoutMessageInput;
  requester?: PersonCreateOneWithoutRequested_messagesInput;
  ccs?: PersonCreateManyWithoutCc_messagesInput;
  integration_url?: String;
  integration_id?: String;
  title?: String;
  content?: String;
  channel?: CHANNEL;
  read?: Boolean;
  updated?: Boolean;
  archived?: Boolean;
  processed?: Boolean;
}

export interface PersonUpdateOneWithoutRequested_messagesInput {
  create?: PersonCreateWithoutRequested_messagesInput;
  update?: PersonUpdateWithoutRequested_messagesDataInput;
  upsert?: PersonUpsertWithoutRequested_messagesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: PersonWhereUniqueInput;
}

export interface ProjectCreateWithoutMessagesInput {
  clientId?: ID_Input;
  accounts?: AccountCreateManyWithoutProjectInput;
  persons?: PersonCreateManyWithoutProjectInput;
  name: String;
}

export interface PersonUpdateWithoutRequested_messagesDataInput {
  clientId?: ID_Input;
  _projectId?: ID_Input;
  project?: ProjectUpdateOneRequiredWithoutPersonsInput;
  right?: ProjectRightUpdateOneWithoutPersonInput;
  submitted_messages?: MessageUpdateManyWithoutSubmitterInput;
  cc_messages?: MessageUpdateManyWithoutCcsInput;
  account?: AccountUpdateOneWithoutPersonInput;
  deleted?: Boolean;
  type?: PERSON_TYPE;
  name?: String;
  email?: String;
  details?: String;
  phone?: String;
  zendesk_url?: String;
}

export interface PersonCreateWithoutRequested_messagesInput {
  clientId?: ID_Input;
  _projectId?: ID_Input;
  project: ProjectCreateOneWithoutPersonsInput;
  right?: ProjectRightCreateOneWithoutPersonInput;
  submitted_messages?: MessageCreateManyWithoutSubmitterInput;
  cc_messages?: MessageCreateManyWithoutCcsInput;
  account?: AccountCreateOneWithoutPersonInput;
  deleted?: Boolean;
  type?: PERSON_TYPE;
  name: String;
  email?: String;
  details?: String;
  phone?: String;
  zendesk_url?: String;
}

export interface MessageUpdateManyWithoutCcsInput {
  create?: MessageCreateWithoutCcsInput[] | MessageCreateWithoutCcsInput;
  delete?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  set?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  disconnect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  update?:
    | MessageUpdateWithWhereUniqueWithoutCcsInput[]
    | MessageUpdateWithWhereUniqueWithoutCcsInput;
  upsert?:
    | MessageUpsertWithWhereUniqueWithoutCcsInput[]
    | MessageUpsertWithWhereUniqueWithoutCcsInput;
  deleteMany?: MessageScalarWhereInput[] | MessageScalarWhereInput;
  updateMany?:
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput;
}

export interface MessageCreateWithoutCcsInput {
  clientId?: ID_Input;
  receivedAt?: DateTimeInput;
  _projectId?: ID_Input;
  project: ProjectCreateOneWithoutMessagesInput;
  sub_messages?: SubmessageCreateManyWithoutMessageInput;
  submitter: PersonCreateOneWithoutSubmitted_messagesInput;
  requester?: PersonCreateOneWithoutRequested_messagesInput;
  integration_url?: String;
  integration_id?: String;
  title?: String;
  content?: String;
  channel?: CHANNEL;
  read?: Boolean;
  updated?: Boolean;
  archived?: Boolean;
  processed?: Boolean;
}

export interface MessageUpdateWithWhereUniqueWithoutCcsInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutCcsDataInput;
}

export interface PersonCreateWithoutSubmitted_messagesInput {
  clientId?: ID_Input;
  _projectId?: ID_Input;
  project: ProjectCreateOneWithoutPersonsInput;
  right?: ProjectRightCreateOneWithoutPersonInput;
  requested_messages?: MessageCreateManyWithoutRequesterInput;
  cc_messages?: MessageCreateManyWithoutCcsInput;
  account?: AccountCreateOneWithoutPersonInput;
  deleted?: Boolean;
  type?: PERSON_TYPE;
  name: String;
  email?: String;
  details?: String;
  phone?: String;
  zendesk_url?: String;
}

export interface MessageUpdateWithoutCcsDataInput {
  clientId?: ID_Input;
  receivedAt?: DateTimeInput;
  _projectId?: ID_Input;
  project?: ProjectUpdateOneRequiredWithoutMessagesInput;
  sub_messages?: SubmessageUpdateManyWithoutMessageInput;
  submitter?: PersonUpdateOneRequiredWithoutSubmitted_messagesInput;
  requester?: PersonUpdateOneWithoutRequested_messagesInput;
  integration_url?: String;
  integration_id?: String;
  title?: String;
  content?: String;
  channel?: CHANNEL;
  read?: Boolean;
  updated?: Boolean;
  archived?: Boolean;
  processed?: Boolean;
}

export interface MessageCreateWithoutRequesterInput {
  clientId?: ID_Input;
  receivedAt?: DateTimeInput;
  _projectId?: ID_Input;
  project: ProjectCreateOneWithoutMessagesInput;
  sub_messages?: SubmessageCreateManyWithoutMessageInput;
  submitter: PersonCreateOneWithoutSubmitted_messagesInput;
  ccs?: PersonCreateManyWithoutCc_messagesInput;
  integration_url?: String;
  integration_id?: String;
  title?: String;
  content?: String;
  channel?: CHANNEL;
  read?: Boolean;
  updated?: Boolean;
  archived?: Boolean;
  processed?: Boolean;
}

export interface PersonUpdateOneRequiredWithoutSubmitted_messagesInput {
  create?: PersonCreateWithoutSubmitted_messagesInput;
  update?: PersonUpdateWithoutSubmitted_messagesDataInput;
  upsert?: PersonUpsertWithoutSubmitted_messagesInput;
  connect?: PersonWhereUniqueInput;
}

export interface PersonCreateWithoutCc_messagesInput {
  clientId?: ID_Input;
  _projectId?: ID_Input;
  project: ProjectCreateOneWithoutPersonsInput;
  right?: ProjectRightCreateOneWithoutPersonInput;
  submitted_messages?: MessageCreateManyWithoutSubmitterInput;
  requested_messages?: MessageCreateManyWithoutRequesterInput;
  account?: AccountCreateOneWithoutPersonInput;
  deleted?: Boolean;
  type?: PERSON_TYPE;
  name: String;
  email?: String;
  details?: String;
  phone?: String;
  zendesk_url?: String;
}

export interface PersonUpdateWithoutSubmitted_messagesDataInput {
  clientId?: ID_Input;
  _projectId?: ID_Input;
  project?: ProjectUpdateOneRequiredWithoutPersonsInput;
  right?: ProjectRightUpdateOneWithoutPersonInput;
  requested_messages?: MessageUpdateManyWithoutRequesterInput;
  cc_messages?: MessageUpdateManyWithoutCcsInput;
  account?: AccountUpdateOneWithoutPersonInput;
  deleted?: Boolean;
  type?: PERSON_TYPE;
  name?: String;
  email?: String;
  details?: String;
  phone?: String;
  zendesk_url?: String;
}

export interface PersonWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  clientId?: ID_Input;
  clientId_not?: ID_Input;
  clientId_in?: ID_Input[] | ID_Input;
  clientId_not_in?: ID_Input[] | ID_Input;
  clientId_lt?: ID_Input;
  clientId_lte?: ID_Input;
  clientId_gt?: ID_Input;
  clientId_gte?: ID_Input;
  clientId_contains?: ID_Input;
  clientId_not_contains?: ID_Input;
  clientId_starts_with?: ID_Input;
  clientId_not_starts_with?: ID_Input;
  clientId_ends_with?: ID_Input;
  clientId_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  _projectId?: ID_Input;
  _projectId_not?: ID_Input;
  _projectId_in?: ID_Input[] | ID_Input;
  _projectId_not_in?: ID_Input[] | ID_Input;
  _projectId_lt?: ID_Input;
  _projectId_lte?: ID_Input;
  _projectId_gt?: ID_Input;
  _projectId_gte?: ID_Input;
  _projectId_contains?: ID_Input;
  _projectId_not_contains?: ID_Input;
  _projectId_starts_with?: ID_Input;
  _projectId_not_starts_with?: ID_Input;
  _projectId_ends_with?: ID_Input;
  _projectId_not_ends_with?: ID_Input;
  project?: ProjectWhereInput;
  right?: ProjectRightWhereInput;
  submitted_messages_every?: MessageWhereInput;
  submitted_messages_some?: MessageWhereInput;
  submitted_messages_none?: MessageWhereInput;
  requested_messages_every?: MessageWhereInput;
  requested_messages_some?: MessageWhereInput;
  requested_messages_none?: MessageWhereInput;
  cc_messages_every?: MessageWhereInput;
  cc_messages_some?: MessageWhereInput;
  cc_messages_none?: MessageWhereInput;
  account?: AccountWhereInput;
  deleted?: Boolean;
  deleted_not?: Boolean;
  type?: PERSON_TYPE;
  type_not?: PERSON_TYPE;
  type_in?: PERSON_TYPE[] | PERSON_TYPE;
  type_not_in?: PERSON_TYPE[] | PERSON_TYPE;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  details?: String;
  details_not?: String;
  details_in?: String[] | String;
  details_not_in?: String[] | String;
  details_lt?: String;
  details_lte?: String;
  details_gt?: String;
  details_gte?: String;
  details_contains?: String;
  details_not_contains?: String;
  details_starts_with?: String;
  details_not_starts_with?: String;
  details_ends_with?: String;
  details_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  zendesk_url?: String;
  zendesk_url_not?: String;
  zendesk_url_in?: String[] | String;
  zendesk_url_not_in?: String[] | String;
  zendesk_url_lt?: String;
  zendesk_url_lte?: String;
  zendesk_url_gt?: String;
  zendesk_url_gte?: String;
  zendesk_url_contains?: String;
  zendesk_url_not_contains?: String;
  zendesk_url_starts_with?: String;
  zendesk_url_not_starts_with?: String;
  zendesk_url_ends_with?: String;
  zendesk_url_not_ends_with?: String;
  AND?: PersonWhereInput[] | PersonWhereInput;
  OR?: PersonWhereInput[] | PersonWhereInput;
  NOT?: PersonWhereInput[] | PersonWhereInput;
}

export interface MessageUpdateManyWithoutRequesterInput {
  create?:
    | MessageCreateWithoutRequesterInput[]
    | MessageCreateWithoutRequesterInput;
  delete?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  set?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  disconnect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  update?:
    | MessageUpdateWithWhereUniqueWithoutRequesterInput[]
    | MessageUpdateWithWhereUniqueWithoutRequesterInput;
  upsert?:
    | MessageUpsertWithWhereUniqueWithoutRequesterInput[]
    | MessageUpsertWithWhereUniqueWithoutRequesterInput;
  deleteMany?: MessageScalarWhereInput[] | MessageScalarWhereInput;
  updateMany?:
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput;
}

export interface ProjectWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  clientId?: ID_Input;
  clientId_not?: ID_Input;
  clientId_in?: ID_Input[] | ID_Input;
  clientId_not_in?: ID_Input[] | ID_Input;
  clientId_lt?: ID_Input;
  clientId_lte?: ID_Input;
  clientId_gt?: ID_Input;
  clientId_gte?: ID_Input;
  clientId_contains?: ID_Input;
  clientId_not_contains?: ID_Input;
  clientId_starts_with?: ID_Input;
  clientId_not_starts_with?: ID_Input;
  clientId_ends_with?: ID_Input;
  clientId_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  accounts_every?: AccountWhereInput;
  accounts_some?: AccountWhereInput;
  accounts_none?: AccountWhereInput;
  messages_every?: MessageWhereInput;
  messages_some?: MessageWhereInput;
  messages_none?: MessageWhereInput;
  persons_every?: PersonWhereInput;
  persons_some?: PersonWhereInput;
  persons_none?: PersonWhereInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: ProjectWhereInput[] | ProjectWhereInput;
  OR?: ProjectWhereInput[] | ProjectWhereInput;
  NOT?: ProjectWhereInput[] | ProjectWhereInput;
}

export interface MessageUpdateWithWhereUniqueWithoutRequesterInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutRequesterDataInput;
}

export interface PersonSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PersonWhereInput;
  AND?: PersonSubscriptionWhereInput[] | PersonSubscriptionWhereInput;
  OR?: PersonSubscriptionWhereInput[] | PersonSubscriptionWhereInput;
  NOT?: PersonSubscriptionWhereInput[] | PersonSubscriptionWhereInput;
}

export interface MessageUpdateWithoutRequesterDataInput {
  clientId?: ID_Input;
  receivedAt?: DateTimeInput;
  _projectId?: ID_Input;
  project?: ProjectUpdateOneRequiredWithoutMessagesInput;
  sub_messages?: SubmessageUpdateManyWithoutMessageInput;
  submitter?: PersonUpdateOneRequiredWithoutSubmitted_messagesInput;
  ccs?: PersonUpdateManyWithoutCc_messagesInput;
  integration_url?: String;
  integration_id?: String;
  title?: String;
  content?: String;
  channel?: CHANNEL;
  read?: Boolean;
  updated?: Boolean;
  archived?: Boolean;
  processed?: Boolean;
}

export interface MessageUpsertWithoutSub_messagesInput {
  update: MessageUpdateWithoutSub_messagesDataInput;
  create: MessageCreateWithoutSub_messagesInput;
}

export interface PersonUpdateManyWithoutCc_messagesInput {
  create?:
    | PersonCreateWithoutCc_messagesInput[]
    | PersonCreateWithoutCc_messagesInput;
  delete?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
  connect?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
  set?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
  disconnect?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
  update?:
    | PersonUpdateWithWhereUniqueWithoutCc_messagesInput[]
    | PersonUpdateWithWhereUniqueWithoutCc_messagesInput;
  upsert?:
    | PersonUpsertWithWhereUniqueWithoutCc_messagesInput[]
    | PersonUpsertWithWhereUniqueWithoutCc_messagesInput;
  deleteMany?: PersonScalarWhereInput[] | PersonScalarWhereInput;
  updateMany?:
    | PersonUpdateManyWithWhereNestedInput[]
    | PersonUpdateManyWithWhereNestedInput;
}

export interface SubmessageUpdateInput {
  clientId?: ID_Input;
  receivedAt?: DateTimeInput;
  message?: MessageUpdateOneRequiredWithoutSub_messagesInput;
  submitter?: PersonUpdateOneRequiredInput;
  integration_id?: String;
  type?: MESSAGE_TYPE;
  content?: String;
}

export interface PersonUpdateWithWhereUniqueWithoutCc_messagesInput {
  where: PersonWhereUniqueInput;
  data: PersonUpdateWithoutCc_messagesDataInput;
}

export interface SubmessageCreateInput {
  clientId?: ID_Input;
  receivedAt?: DateTimeInput;
  message: MessageCreateOneWithoutSub_messagesInput;
  submitter: PersonCreateOneInput;
  integration_id?: String;
  type?: MESSAGE_TYPE;
  content?: String;
}

export interface PersonUpdateWithoutCc_messagesDataInput {
  clientId?: ID_Input;
  _projectId?: ID_Input;
  project?: ProjectUpdateOneRequiredWithoutPersonsInput;
  right?: ProjectRightUpdateOneWithoutPersonInput;
  submitted_messages?: MessageUpdateManyWithoutSubmitterInput;
  requested_messages?: MessageUpdateManyWithoutRequesterInput;
  account?: AccountUpdateOneWithoutPersonInput;
  deleted?: Boolean;
  type?: PERSON_TYPE;
  name?: String;
  email?: String;
  details?: String;
  phone?: String;
  zendesk_url?: String;
}

export interface PersonCreateOneWithoutRightInput {
  create?: PersonCreateWithoutRightInput;
  connect?: PersonWhereUniqueInput;
}

export interface AccountUpdateOneWithoutPersonInput {
  create?: AccountCreateWithoutPersonInput;
  update?: AccountUpdateWithoutPersonDataInput;
  upsert?: AccountUpsertWithoutPersonInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: AccountWhereUniqueInput;
}

export interface PersonUpdateManyMutationInput {
  clientId?: ID_Input;
  _projectId?: ID_Input;
  deleted?: Boolean;
  type?: PERSON_TYPE;
  name?: String;
  email?: String;
  details?: String;
  phone?: String;
  zendesk_url?: String;
}

export interface AccountUpdateWithoutPersonDataInput {
  clientId?: ID_Input;
  lastSeenAt?: DateTimeInput;
  deletedAt?: DateTimeInput;
  project?: ProjectUpdateOneRequiredWithoutAccountsInput;
  reset_password_token?: String;
  reset_password_exp_date?: DateTimeInput;
  username?: String;
  hash?: String;
  need_onboarding?: Boolean;
  email_validated?: Boolean;
  emailConfirmToken?: String;
}

export type SubmessageWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  clientId?: ID_Input;
}>;

export interface AccountUpsertWithoutPersonInput {
  update: AccountUpdateWithoutPersonDataInput;
  create: AccountCreateWithoutPersonInput;
}

export interface MessageCreateManyWithoutProjectInput {
  create?:
    | MessageCreateWithoutProjectInput[]
    | MessageCreateWithoutProjectInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
}

export interface PersonUpsertWithWhereUniqueWithoutCc_messagesInput {
  where: PersonWhereUniqueInput;
  update: PersonUpdateWithoutCc_messagesDataInput;
  create: PersonCreateWithoutCc_messagesInput;
}

export interface PersonCreateOneInput {
  create?: PersonCreateInput;
  connect?: PersonWhereUniqueInput;
}

export interface PersonScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  clientId?: ID_Input;
  clientId_not?: ID_Input;
  clientId_in?: ID_Input[] | ID_Input;
  clientId_not_in?: ID_Input[] | ID_Input;
  clientId_lt?: ID_Input;
  clientId_lte?: ID_Input;
  clientId_gt?: ID_Input;
  clientId_gte?: ID_Input;
  clientId_contains?: ID_Input;
  clientId_not_contains?: ID_Input;
  clientId_starts_with?: ID_Input;
  clientId_not_starts_with?: ID_Input;
  clientId_ends_with?: ID_Input;
  clientId_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  _projectId?: ID_Input;
  _projectId_not?: ID_Input;
  _projectId_in?: ID_Input[] | ID_Input;
  _projectId_not_in?: ID_Input[] | ID_Input;
  _projectId_lt?: ID_Input;
  _projectId_lte?: ID_Input;
  _projectId_gt?: ID_Input;
  _projectId_gte?: ID_Input;
  _projectId_contains?: ID_Input;
  _projectId_not_contains?: ID_Input;
  _projectId_starts_with?: ID_Input;
  _projectId_not_starts_with?: ID_Input;
  _projectId_ends_with?: ID_Input;
  _projectId_not_ends_with?: ID_Input;
  deleted?: Boolean;
  deleted_not?: Boolean;
  type?: PERSON_TYPE;
  type_not?: PERSON_TYPE;
  type_in?: PERSON_TYPE[] | PERSON_TYPE;
  type_not_in?: PERSON_TYPE[] | PERSON_TYPE;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  details?: String;
  details_not?: String;
  details_in?: String[] | String;
  details_not_in?: String[] | String;
  details_lt?: String;
  details_lte?: String;
  details_gt?: String;
  details_gte?: String;
  details_contains?: String;
  details_not_contains?: String;
  details_starts_with?: String;
  details_not_starts_with?: String;
  details_ends_with?: String;
  details_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  zendesk_url?: String;
  zendesk_url_not?: String;
  zendesk_url_in?: String[] | String;
  zendesk_url_not_in?: String[] | String;
  zendesk_url_lt?: String;
  zendesk_url_lte?: String;
  zendesk_url_gt?: String;
  zendesk_url_gte?: String;
  zendesk_url_contains?: String;
  zendesk_url_not_contains?: String;
  zendesk_url_starts_with?: String;
  zendesk_url_not_starts_with?: String;
  zendesk_url_ends_with?: String;
  zendesk_url_not_ends_with?: String;
  AND?: PersonScalarWhereInput[] | PersonScalarWhereInput;
  OR?: PersonScalarWhereInput[] | PersonScalarWhereInput;
  NOT?: PersonScalarWhereInput[] | PersonScalarWhereInput;
}

export interface AccountCreateManyWithoutProjectInput {
  create?:
    | AccountCreateWithoutProjectInput[]
    | AccountCreateWithoutProjectInput;
  connect?: AccountWhereUniqueInput[] | AccountWhereUniqueInput;
}

export interface PersonUpdateManyWithWhereNestedInput {
  where: PersonScalarWhereInput;
  data: PersonUpdateManyDataInput;
}

export interface ProjectRightCreateOneWithoutPersonInput {
  create?: ProjectRightCreateWithoutPersonInput;
}

export interface PersonUpdateManyDataInput {
  clientId?: ID_Input;
  _projectId?: ID_Input;
  deleted?: Boolean;
  type?: PERSON_TYPE;
  name?: String;
  email?: String;
  details?: String;
  phone?: String;
  zendesk_url?: String;
}

export interface PersonCreateManyWithoutProjectInput {
  create?: PersonCreateWithoutProjectInput[] | PersonCreateWithoutProjectInput;
  connect?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
}

export interface MessageUpsertWithWhereUniqueWithoutRequesterInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutRequesterDataInput;
  create: MessageCreateWithoutRequesterInput;
}

export interface ProjectCreateOneWithoutMessagesInput {
  create?: ProjectCreateWithoutMessagesInput;
  connect?: ProjectWhereUniqueInput;
}

export interface MessageScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  clientId?: ID_Input;
  clientId_not?: ID_Input;
  clientId_in?: ID_Input[] | ID_Input;
  clientId_not_in?: ID_Input[] | ID_Input;
  clientId_lt?: ID_Input;
  clientId_lte?: ID_Input;
  clientId_gt?: ID_Input;
  clientId_gte?: ID_Input;
  clientId_contains?: ID_Input;
  clientId_not_contains?: ID_Input;
  clientId_starts_with?: ID_Input;
  clientId_not_starts_with?: ID_Input;
  clientId_ends_with?: ID_Input;
  clientId_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  receivedAt?: DateTimeInput;
  receivedAt_not?: DateTimeInput;
  receivedAt_in?: DateTimeInput[] | DateTimeInput;
  receivedAt_not_in?: DateTimeInput[] | DateTimeInput;
  receivedAt_lt?: DateTimeInput;
  receivedAt_lte?: DateTimeInput;
  receivedAt_gt?: DateTimeInput;
  receivedAt_gte?: DateTimeInput;
  _projectId?: ID_Input;
  _projectId_not?: ID_Input;
  _projectId_in?: ID_Input[] | ID_Input;
  _projectId_not_in?: ID_Input[] | ID_Input;
  _projectId_lt?: ID_Input;
  _projectId_lte?: ID_Input;
  _projectId_gt?: ID_Input;
  _projectId_gte?: ID_Input;
  _projectId_contains?: ID_Input;
  _projectId_not_contains?: ID_Input;
  _projectId_starts_with?: ID_Input;
  _projectId_not_starts_with?: ID_Input;
  _projectId_ends_with?: ID_Input;
  _projectId_not_ends_with?: ID_Input;
  integration_url?: String;
  integration_url_not?: String;
  integration_url_in?: String[] | String;
  integration_url_not_in?: String[] | String;
  integration_url_lt?: String;
  integration_url_lte?: String;
  integration_url_gt?: String;
  integration_url_gte?: String;
  integration_url_contains?: String;
  integration_url_not_contains?: String;
  integration_url_starts_with?: String;
  integration_url_not_starts_with?: String;
  integration_url_ends_with?: String;
  integration_url_not_ends_with?: String;
  integration_id?: String;
  integration_id_not?: String;
  integration_id_in?: String[] | String;
  integration_id_not_in?: String[] | String;
  integration_id_lt?: String;
  integration_id_lte?: String;
  integration_id_gt?: String;
  integration_id_gte?: String;
  integration_id_contains?: String;
  integration_id_not_contains?: String;
  integration_id_starts_with?: String;
  integration_id_not_starts_with?: String;
  integration_id_ends_with?: String;
  integration_id_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  channel?: CHANNEL;
  channel_not?: CHANNEL;
  channel_in?: CHANNEL[] | CHANNEL;
  channel_not_in?: CHANNEL[] | CHANNEL;
  read?: Boolean;
  read_not?: Boolean;
  updated?: Boolean;
  updated_not?: Boolean;
  archived?: Boolean;
  archived_not?: Boolean;
  processed?: Boolean;
  processed_not?: Boolean;
  AND?: MessageScalarWhereInput[] | MessageScalarWhereInput;
  OR?: MessageScalarWhereInput[] | MessageScalarWhereInput;
  NOT?: MessageScalarWhereInput[] | MessageScalarWhereInput;
}

export interface MessageCreateManyWithoutCcsInput {
  create?: MessageCreateWithoutCcsInput[] | MessageCreateWithoutCcsInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
}

export interface MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput;
  data: MessageUpdateManyDataInput;
}

export interface MessageCreateManyWithoutRequesterInput {
  create?:
    | MessageCreateWithoutRequesterInput[]
    | MessageCreateWithoutRequesterInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
}

export interface MessageUpdateManyDataInput {
  clientId?: ID_Input;
  receivedAt?: DateTimeInput;
  _projectId?: ID_Input;
  integration_url?: String;
  integration_id?: String;
  title?: String;
  content?: String;
  channel?: CHANNEL;
  read?: Boolean;
  updated?: Boolean;
  archived?: Boolean;
  processed?: Boolean;
}

export interface AccountCreateOneWithoutPersonInput {
  create?: AccountCreateWithoutPersonInput;
  connect?: AccountWhereUniqueInput;
}

export interface PersonUpsertWithoutSubmitted_messagesInput {
  update: PersonUpdateWithoutSubmitted_messagesDataInput;
  create: PersonCreateWithoutSubmitted_messagesInput;
}

export interface AccountWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  clientId?: ID_Input;
  clientId_not?: ID_Input;
  clientId_in?: ID_Input[] | ID_Input;
  clientId_not_in?: ID_Input[] | ID_Input;
  clientId_lt?: ID_Input;
  clientId_lte?: ID_Input;
  clientId_gt?: ID_Input;
  clientId_gte?: ID_Input;
  clientId_contains?: ID_Input;
  clientId_not_contains?: ID_Input;
  clientId_starts_with?: ID_Input;
  clientId_not_starts_with?: ID_Input;
  clientId_ends_with?: ID_Input;
  clientId_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  lastSeenAt?: DateTimeInput;
  lastSeenAt_not?: DateTimeInput;
  lastSeenAt_in?: DateTimeInput[] | DateTimeInput;
  lastSeenAt_not_in?: DateTimeInput[] | DateTimeInput;
  lastSeenAt_lt?: DateTimeInput;
  lastSeenAt_lte?: DateTimeInput;
  lastSeenAt_gt?: DateTimeInput;
  lastSeenAt_gte?: DateTimeInput;
  deletedAt?: DateTimeInput;
  deletedAt_not?: DateTimeInput;
  deletedAt_in?: DateTimeInput[] | DateTimeInput;
  deletedAt_not_in?: DateTimeInput[] | DateTimeInput;
  deletedAt_lt?: DateTimeInput;
  deletedAt_lte?: DateTimeInput;
  deletedAt_gt?: DateTimeInput;
  deletedAt_gte?: DateTimeInput;
  project?: ProjectWhereInput;
  person?: PersonWhereInput;
  reset_password_token?: String;
  reset_password_token_not?: String;
  reset_password_token_in?: String[] | String;
  reset_password_token_not_in?: String[] | String;
  reset_password_token_lt?: String;
  reset_password_token_lte?: String;
  reset_password_token_gt?: String;
  reset_password_token_gte?: String;
  reset_password_token_contains?: String;
  reset_password_token_not_contains?: String;
  reset_password_token_starts_with?: String;
  reset_password_token_not_starts_with?: String;
  reset_password_token_ends_with?: String;
  reset_password_token_not_ends_with?: String;
  reset_password_exp_date?: DateTimeInput;
  reset_password_exp_date_not?: DateTimeInput;
  reset_password_exp_date_in?: DateTimeInput[] | DateTimeInput;
  reset_password_exp_date_not_in?: DateTimeInput[] | DateTimeInput;
  reset_password_exp_date_lt?: DateTimeInput;
  reset_password_exp_date_lte?: DateTimeInput;
  reset_password_exp_date_gt?: DateTimeInput;
  reset_password_exp_date_gte?: DateTimeInput;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  hash?: String;
  hash_not?: String;
  hash_in?: String[] | String;
  hash_not_in?: String[] | String;
  hash_lt?: String;
  hash_lte?: String;
  hash_gt?: String;
  hash_gte?: String;
  hash_contains?: String;
  hash_not_contains?: String;
  hash_starts_with?: String;
  hash_not_starts_with?: String;
  hash_ends_with?: String;
  hash_not_ends_with?: String;
  need_onboarding?: Boolean;
  need_onboarding_not?: Boolean;
  email_validated?: Boolean;
  email_validated_not?: Boolean;
  emailConfirmToken?: String;
  emailConfirmToken_not?: String;
  emailConfirmToken_in?: String[] | String;
  emailConfirmToken_not_in?: String[] | String;
  emailConfirmToken_lt?: String;
  emailConfirmToken_lte?: String;
  emailConfirmToken_gt?: String;
  emailConfirmToken_gte?: String;
  emailConfirmToken_contains?: String;
  emailConfirmToken_not_contains?: String;
  emailConfirmToken_starts_with?: String;
  emailConfirmToken_not_starts_with?: String;
  emailConfirmToken_ends_with?: String;
  emailConfirmToken_not_ends_with?: String;
  AND?: AccountWhereInput[] | AccountWhereInput;
  OR?: AccountWhereInput[] | AccountWhereInput;
  NOT?: AccountWhereInput[] | AccountWhereInput;
}

export interface MessageUpsertWithWhereUniqueWithoutCcsInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutCcsDataInput;
  create: MessageCreateWithoutCcsInput;
}

export interface MessageUpdateOneRequiredWithoutSub_messagesInput {
  create?: MessageCreateWithoutSub_messagesInput;
  update?: MessageUpdateWithoutSub_messagesDataInput;
  upsert?: MessageUpsertWithoutSub_messagesInput;
  connect?: MessageWhereUniqueInput;
}

export interface PersonUpsertWithoutRequested_messagesInput {
  update: PersonUpdateWithoutRequested_messagesDataInput;
  create: PersonCreateWithoutRequested_messagesInput;
}

export interface PersonCreateWithoutRightInput {
  clientId?: ID_Input;
  _projectId?: ID_Input;
  project: ProjectCreateOneWithoutPersonsInput;
  submitted_messages?: MessageCreateManyWithoutSubmitterInput;
  requested_messages?: MessageCreateManyWithoutRequesterInput;
  cc_messages?: MessageCreateManyWithoutCcsInput;
  account?: AccountCreateOneWithoutPersonInput;
  deleted?: Boolean;
  type?: PERSON_TYPE;
  name: String;
  email?: String;
  details?: String;
  phone?: String;
  zendesk_url?: String;
}

export interface MessageUpsertWithWhereUniqueWithoutSubmitterInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutSubmitterDataInput;
  create: MessageCreateWithoutSubmitterInput;
}

export interface MessageUpdateManyMutationInput {
  clientId?: ID_Input;
  receivedAt?: DateTimeInput;
  _projectId?: ID_Input;
  integration_url?: String;
  integration_id?: String;
  title?: String;
  content?: String;
  channel?: CHANNEL;
  read?: Boolean;
  updated?: Boolean;
  archived?: Boolean;
  processed?: Boolean;
}

export interface PersonUpsertWithWhereUniqueWithoutProjectInput {
  where: PersonWhereUniqueInput;
  update: PersonUpdateWithoutProjectDataInput;
  create: PersonCreateWithoutProjectInput;
}

export interface ProjectCreateOneWithoutAccountsInput {
  create?: ProjectCreateWithoutAccountsInput;
  connect?: ProjectWhereUniqueInput;
}

export interface ProjectUpsertNestedInput {
  update: ProjectUpdateDataInput;
  create: ProjectCreateInput;
}

export interface ProjectCreateOneWithoutPersonsInput {
  create?: ProjectCreateWithoutPersonsInput;
  connect?: ProjectWhereUniqueInput;
}

export interface ProjectRightUpsertWithoutPersonInput {
  update: ProjectRightUpdateWithoutPersonDataInput;
  create: ProjectRightCreateWithoutPersonInput;
}

export interface ProjectCreateOneInput {
  create?: ProjectCreateInput;
  connect?: ProjectWhereUniqueInput;
}

export interface PersonUpsertWithoutAccountInput {
  update: PersonUpdateWithoutAccountDataInput;
  create: PersonCreateWithoutAccountInput;
}

export interface PersonCreateOneWithoutRequested_messagesInput {
  create?: PersonCreateWithoutRequested_messagesInput;
  connect?: PersonWhereUniqueInput;
}

export interface AccountUpsertWithWhereUniqueWithoutProjectInput {
  where: AccountWhereUniqueInput;
  update: AccountUpdateWithoutProjectDataInput;
  create: AccountCreateWithoutProjectInput;
}

export interface PersonCreateManyWithoutCc_messagesInput {
  create?:
    | PersonCreateWithoutCc_messagesInput[]
    | PersonCreateWithoutCc_messagesInput;
  connect?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
}

export interface AccountScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  clientId?: ID_Input;
  clientId_not?: ID_Input;
  clientId_in?: ID_Input[] | ID_Input;
  clientId_not_in?: ID_Input[] | ID_Input;
  clientId_lt?: ID_Input;
  clientId_lte?: ID_Input;
  clientId_gt?: ID_Input;
  clientId_gte?: ID_Input;
  clientId_contains?: ID_Input;
  clientId_not_contains?: ID_Input;
  clientId_starts_with?: ID_Input;
  clientId_not_starts_with?: ID_Input;
  clientId_ends_with?: ID_Input;
  clientId_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  lastSeenAt?: DateTimeInput;
  lastSeenAt_not?: DateTimeInput;
  lastSeenAt_in?: DateTimeInput[] | DateTimeInput;
  lastSeenAt_not_in?: DateTimeInput[] | DateTimeInput;
  lastSeenAt_lt?: DateTimeInput;
  lastSeenAt_lte?: DateTimeInput;
  lastSeenAt_gt?: DateTimeInput;
  lastSeenAt_gte?: DateTimeInput;
  deletedAt?: DateTimeInput;
  deletedAt_not?: DateTimeInput;
  deletedAt_in?: DateTimeInput[] | DateTimeInput;
  deletedAt_not_in?: DateTimeInput[] | DateTimeInput;
  deletedAt_lt?: DateTimeInput;
  deletedAt_lte?: DateTimeInput;
  deletedAt_gt?: DateTimeInput;
  deletedAt_gte?: DateTimeInput;
  reset_password_token?: String;
  reset_password_token_not?: String;
  reset_password_token_in?: String[] | String;
  reset_password_token_not_in?: String[] | String;
  reset_password_token_lt?: String;
  reset_password_token_lte?: String;
  reset_password_token_gt?: String;
  reset_password_token_gte?: String;
  reset_password_token_contains?: String;
  reset_password_token_not_contains?: String;
  reset_password_token_starts_with?: String;
  reset_password_token_not_starts_with?: String;
  reset_password_token_ends_with?: String;
  reset_password_token_not_ends_with?: String;
  reset_password_exp_date?: DateTimeInput;
  reset_password_exp_date_not?: DateTimeInput;
  reset_password_exp_date_in?: DateTimeInput[] | DateTimeInput;
  reset_password_exp_date_not_in?: DateTimeInput[] | DateTimeInput;
  reset_password_exp_date_lt?: DateTimeInput;
  reset_password_exp_date_lte?: DateTimeInput;
  reset_password_exp_date_gt?: DateTimeInput;
  reset_password_exp_date_gte?: DateTimeInput;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  hash?: String;
  hash_not?: String;
  hash_in?: String[] | String;
  hash_not_in?: String[] | String;
  hash_lt?: String;
  hash_lte?: String;
  hash_gt?: String;
  hash_gte?: String;
  hash_contains?: String;
  hash_not_contains?: String;
  hash_starts_with?: String;
  hash_not_starts_with?: String;
  hash_ends_with?: String;
  hash_not_ends_with?: String;
  need_onboarding?: Boolean;
  need_onboarding_not?: Boolean;
  email_validated?: Boolean;
  email_validated_not?: Boolean;
  emailConfirmToken?: String;
  emailConfirmToken_not?: String;
  emailConfirmToken_in?: String[] | String;
  emailConfirmToken_not_in?: String[] | String;
  emailConfirmToken_lt?: String;
  emailConfirmToken_lte?: String;
  emailConfirmToken_gt?: String;
  emailConfirmToken_gte?: String;
  emailConfirmToken_contains?: String;
  emailConfirmToken_not_contains?: String;
  emailConfirmToken_starts_with?: String;
  emailConfirmToken_not_starts_with?: String;
  emailConfirmToken_ends_with?: String;
  emailConfirmToken_not_ends_with?: String;
  AND?: AccountScalarWhereInput[] | AccountScalarWhereInput;
  OR?: AccountScalarWhereInput[] | AccountScalarWhereInput;
  NOT?: AccountScalarWhereInput[] | AccountScalarWhereInput;
}

export interface AccountSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AccountWhereInput;
  AND?: AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput;
  OR?: AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput;
  NOT?: AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput;
}

export interface AccountUpdateManyWithWhereNestedInput {
  where: AccountScalarWhereInput;
  data: AccountUpdateManyDataInput;
}

export interface ProjectUpdateManyMutationInput {
  clientId?: ID_Input;
  name?: String;
}

export interface AccountUpdateManyDataInput {
  clientId?: ID_Input;
  lastSeenAt?: DateTimeInput;
  deletedAt?: DateTimeInput;
  reset_password_token?: String;
  reset_password_exp_date?: DateTimeInput;
  username?: String;
  hash?: String;
  need_onboarding?: Boolean;
  email_validated?: Boolean;
  emailConfirmToken?: String;
}

export interface SubmessageCreateManyWithoutMessageInput {
  create?:
    | SubmessageCreateWithoutMessageInput[]
    | SubmessageCreateWithoutMessageInput;
  connect?: SubmessageWhereUniqueInput[] | SubmessageWhereUniqueInput;
}

export interface ProjectUpsertWithoutPersonsInput {
  update: ProjectUpdateWithoutPersonsDataInput;
  create: ProjectCreateWithoutPersonsInput;
}

export interface MessageCreateManyWithoutSubmitterInput {
  create?:
    | MessageCreateWithoutSubmitterInput[]
    | MessageCreateWithoutSubmitterInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
}

export interface SubmessageUpdateManyWithWhereNestedInput {
  where: SubmessageScalarWhereInput;
  data: SubmessageUpdateManyDataInput;
}

export interface SubmessageScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  clientId?: ID_Input;
  clientId_not?: ID_Input;
  clientId_in?: ID_Input[] | ID_Input;
  clientId_not_in?: ID_Input[] | ID_Input;
  clientId_lt?: ID_Input;
  clientId_lte?: ID_Input;
  clientId_gt?: ID_Input;
  clientId_gte?: ID_Input;
  clientId_contains?: ID_Input;
  clientId_not_contains?: ID_Input;
  clientId_starts_with?: ID_Input;
  clientId_not_starts_with?: ID_Input;
  clientId_ends_with?: ID_Input;
  clientId_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  receivedAt?: DateTimeInput;
  receivedAt_not?: DateTimeInput;
  receivedAt_in?: DateTimeInput[] | DateTimeInput;
  receivedAt_not_in?: DateTimeInput[] | DateTimeInput;
  receivedAt_lt?: DateTimeInput;
  receivedAt_lte?: DateTimeInput;
  receivedAt_gt?: DateTimeInput;
  receivedAt_gte?: DateTimeInput;
  integration_id?: String;
  integration_id_not?: String;
  integration_id_in?: String[] | String;
  integration_id_not_in?: String[] | String;
  integration_id_lt?: String;
  integration_id_lte?: String;
  integration_id_gt?: String;
  integration_id_gte?: String;
  integration_id_contains?: String;
  integration_id_not_contains?: String;
  integration_id_starts_with?: String;
  integration_id_not_starts_with?: String;
  integration_id_ends_with?: String;
  integration_id_not_ends_with?: String;
  type?: MESSAGE_TYPE;
  type_not?: MESSAGE_TYPE;
  type_in?: MESSAGE_TYPE[] | MESSAGE_TYPE;
  type_not_in?: MESSAGE_TYPE[] | MESSAGE_TYPE;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  AND?: SubmessageScalarWhereInput[] | SubmessageScalarWhereInput;
  OR?: SubmessageScalarWhereInput[] | SubmessageScalarWhereInput;
  NOT?: SubmessageScalarWhereInput[] | SubmessageScalarWhereInput;
}

export interface SubmessageUpsertWithWhereUniqueWithoutMessageInput {
  where: SubmessageWhereUniqueInput;
  update: SubmessageUpdateWithoutMessageDataInput;
  create: SubmessageCreateWithoutMessageInput;
}

export interface PersonUpsertNestedInput {
  update: PersonUpdateDataInput;
  create: PersonCreateInput;
}

export interface PersonCreateOneWithoutSubmitted_messagesInput {
  create?: PersonCreateWithoutSubmitted_messagesInput;
  connect?: PersonWhereUniqueInput;
}

export interface PersonCreateOneWithoutAccountInput {
  create?: PersonCreateWithoutAccountInput;
  connect?: PersonWhereUniqueInput;
}

export interface AccountUpdateManyMutationInput {
  clientId?: ID_Input;
  lastSeenAt?: DateTimeInput;
  deletedAt?: DateTimeInput;
  reset_password_token?: String;
  reset_password_exp_date?: DateTimeInput;
  username?: String;
  hash?: String;
  need_onboarding?: Boolean;
  email_validated?: Boolean;
  emailConfirmToken?: String;
}

export interface MessageCreateOneWithoutSub_messagesInput {
  create?: MessageCreateWithoutSub_messagesInput;
  connect?: MessageWhereUniqueInput;
}

export interface MessageWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  clientId?: ID_Input;
  clientId_not?: ID_Input;
  clientId_in?: ID_Input[] | ID_Input;
  clientId_not_in?: ID_Input[] | ID_Input;
  clientId_lt?: ID_Input;
  clientId_lte?: ID_Input;
  clientId_gt?: ID_Input;
  clientId_gte?: ID_Input;
  clientId_contains?: ID_Input;
  clientId_not_contains?: ID_Input;
  clientId_starts_with?: ID_Input;
  clientId_not_starts_with?: ID_Input;
  clientId_ends_with?: ID_Input;
  clientId_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  receivedAt?: DateTimeInput;
  receivedAt_not?: DateTimeInput;
  receivedAt_in?: DateTimeInput[] | DateTimeInput;
  receivedAt_not_in?: DateTimeInput[] | DateTimeInput;
  receivedAt_lt?: DateTimeInput;
  receivedAt_lte?: DateTimeInput;
  receivedAt_gt?: DateTimeInput;
  receivedAt_gte?: DateTimeInput;
  _projectId?: ID_Input;
  _projectId_not?: ID_Input;
  _projectId_in?: ID_Input[] | ID_Input;
  _projectId_not_in?: ID_Input[] | ID_Input;
  _projectId_lt?: ID_Input;
  _projectId_lte?: ID_Input;
  _projectId_gt?: ID_Input;
  _projectId_gte?: ID_Input;
  _projectId_contains?: ID_Input;
  _projectId_not_contains?: ID_Input;
  _projectId_starts_with?: ID_Input;
  _projectId_not_starts_with?: ID_Input;
  _projectId_ends_with?: ID_Input;
  _projectId_not_ends_with?: ID_Input;
  project?: ProjectWhereInput;
  sub_messages_every?: SubmessageWhereInput;
  sub_messages_some?: SubmessageWhereInput;
  sub_messages_none?: SubmessageWhereInput;
  submitter?: PersonWhereInput;
  requester?: PersonWhereInput;
  ccs_every?: PersonWhereInput;
  ccs_some?: PersonWhereInput;
  ccs_none?: PersonWhereInput;
  integration_url?: String;
  integration_url_not?: String;
  integration_url_in?: String[] | String;
  integration_url_not_in?: String[] | String;
  integration_url_lt?: String;
  integration_url_lte?: String;
  integration_url_gt?: String;
  integration_url_gte?: String;
  integration_url_contains?: String;
  integration_url_not_contains?: String;
  integration_url_starts_with?: String;
  integration_url_not_starts_with?: String;
  integration_url_ends_with?: String;
  integration_url_not_ends_with?: String;
  integration_id?: String;
  integration_id_not?: String;
  integration_id_in?: String[] | String;
  integration_id_not_in?: String[] | String;
  integration_id_lt?: String;
  integration_id_lte?: String;
  integration_id_gt?: String;
  integration_id_gte?: String;
  integration_id_contains?: String;
  integration_id_not_contains?: String;
  integration_id_starts_with?: String;
  integration_id_not_starts_with?: String;
  integration_id_ends_with?: String;
  integration_id_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  channel?: CHANNEL;
  channel_not?: CHANNEL;
  channel_in?: CHANNEL[] | CHANNEL;
  channel_not_in?: CHANNEL[] | CHANNEL;
  read?: Boolean;
  read_not?: Boolean;
  updated?: Boolean;
  updated_not?: Boolean;
  archived?: Boolean;
  archived_not?: Boolean;
  processed?: Boolean;
  processed_not?: Boolean;
  AND?: MessageWhereInput[] | MessageWhereInput;
  OR?: MessageWhereInput[] | MessageWhereInput;
  NOT?: MessageWhereInput[] | MessageWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface SubmessagePreviousValues {
  id: ID_Output;
  clientId?: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  receivedAt?: DateTimeOutput;
  integration_id?: String;
  type: MESSAGE_TYPE;
  content: String;
}

export interface SubmessagePreviousValuesPromise
  extends Promise<SubmessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  clientId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  receivedAt: () => Promise<DateTimeOutput>;
  integration_id: () => Promise<String>;
  type: () => Promise<MESSAGE_TYPE>;
  content: () => Promise<String>;
}

export interface SubmessagePreviousValuesSubscription
  extends Promise<AsyncIterator<SubmessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  clientId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  receivedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  integration_id: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<MESSAGE_TYPE>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface Message {
  id: ID_Output;
  clientId?: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  receivedAt?: DateTimeOutput;
  _projectId?: ID_Output;
  integration_url?: String;
  integration_id?: String;
  title: String;
  content: String;
  channel: CHANNEL;
  read: Boolean;
  updated: Boolean;
  archived: Boolean;
  processed: Boolean;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  clientId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  receivedAt: () => Promise<DateTimeOutput>;
  _projectId: () => Promise<ID_Output>;
  project: <T = ProjectPromise>() => T;
  sub_messages: <T = FragmentableArray<Submessage>>(args?: {
    where?: SubmessageWhereInput;
    orderBy?: SubmessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  submitter: <T = PersonPromise>() => T;
  requester: <T = PersonPromise>() => T;
  ccs: <T = FragmentableArray<Person>>(args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  integration_url: () => Promise<String>;
  integration_id: () => Promise<String>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  channel: () => Promise<CHANNEL>;
  read: () => Promise<Boolean>;
  updated: () => Promise<Boolean>;
  archived: () => Promise<Boolean>;
  processed: () => Promise<Boolean>;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  clientId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  receivedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  _projectId: () => Promise<AsyncIterator<ID_Output>>;
  project: <T = ProjectSubscription>() => T;
  sub_messages: <T = Promise<AsyncIterator<SubmessageSubscription>>>(args?: {
    where?: SubmessageWhereInput;
    orderBy?: SubmessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  submitter: <T = PersonSubscription>() => T;
  requester: <T = PersonSubscription>() => T;
  ccs: <T = Promise<AsyncIterator<PersonSubscription>>>(args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  integration_url: () => Promise<AsyncIterator<String>>;
  integration_id: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  channel: () => Promise<AsyncIterator<CHANNEL>>;
  read: () => Promise<AsyncIterator<Boolean>>;
  updated: () => Promise<AsyncIterator<Boolean>>;
  archived: () => Promise<AsyncIterator<Boolean>>;
  processed: () => Promise<AsyncIterator<Boolean>>;
}

export interface AggregateAccount {
  count: Int;
}

export interface AggregateAccountPromise
  extends Promise<AggregateAccount>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAccountSubscription
  extends Promise<AsyncIterator<AggregateAccount>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AccountEdge {
  node: Account;
  cursor: String;
}

export interface AccountEdgePromise extends Promise<AccountEdge>, Fragmentable {
  node: <T = AccountPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AccountEdgeSubscription
  extends Promise<AsyncIterator<AccountEdge>>,
    Fragmentable {
  node: <T = AccountSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSubmessage {
  count: Int;
}

export interface AggregateSubmessagePromise
  extends Promise<AggregateSubmessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSubmessageSubscription
  extends Promise<AsyncIterator<AggregateSubmessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface SubmessageConnection {
  pageInfo: PageInfo;
  edges: SubmessageEdge[];
}

export interface SubmessageConnectionPromise
  extends Promise<SubmessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SubmessageEdge>>() => T;
  aggregate: <T = AggregateSubmessagePromise>() => T;
}

export interface SubmessageConnectionSubscription
  extends Promise<AsyncIterator<SubmessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SubmessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSubmessageSubscription>() => T;
}

export interface AccountConnection {
  pageInfo: PageInfo;
  edges: AccountEdge[];
}

export interface AccountConnectionPromise
  extends Promise<AccountConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AccountEdge>>() => T;
  aggregate: <T = AggregateAccountPromise>() => T;
}

export interface AccountConnectionSubscription
  extends Promise<AsyncIterator<AccountConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AccountEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAccountSubscription>() => T;
}

export interface ProjectRightEdge {
  node: ProjectRight;
  cursor: String;
}

export interface ProjectRightEdgePromise
  extends Promise<ProjectRightEdge>,
    Fragmentable {
  node: <T = ProjectRightPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectRightEdgeSubscription
  extends Promise<AsyncIterator<ProjectRightEdge>>,
    Fragmentable {
  node: <T = ProjectRightSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Project {
  id: ID_Output;
  clientId?: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface ProjectPromise extends Promise<Project>, Fragmentable {
  id: () => Promise<ID_Output>;
  clientId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  accounts: <T = FragmentableArray<Account>>(args?: {
    where?: AccountWhereInput;
    orderBy?: AccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  persons: <T = FragmentableArray<Person>>(args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<String>;
}

export interface ProjectSubscription
  extends Promise<AsyncIterator<Project>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  clientId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  accounts: <T = Promise<AsyncIterator<AccountSubscription>>>(args?: {
    where?: AccountWhereInput;
    orderBy?: AccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  persons: <T = Promise<AsyncIterator<PersonSubscription>>>(args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<AsyncIterator<String>>;
}

export interface Account {
  id: ID_Output;
  clientId?: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  lastSeenAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
  reset_password_token?: String;
  reset_password_exp_date?: DateTimeOutput;
  username: String;
  hash: String;
  need_onboarding: Boolean;
  email_validated: Boolean;
  emailConfirmToken?: String;
}

export interface AccountPromise extends Promise<Account>, Fragmentable {
  id: () => Promise<ID_Output>;
  clientId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  lastSeenAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  project: <T = ProjectPromise>() => T;
  person: <T = PersonPromise>() => T;
  reset_password_token: () => Promise<String>;
  reset_password_exp_date: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
  hash: () => Promise<String>;
  need_onboarding: () => Promise<Boolean>;
  email_validated: () => Promise<Boolean>;
  emailConfirmToken: () => Promise<String>;
}

export interface AccountSubscription
  extends Promise<AsyncIterator<Account>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  clientId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastSeenAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  project: <T = ProjectSubscription>() => T;
  person: <T = PersonSubscription>() => T;
  reset_password_token: () => Promise<AsyncIterator<String>>;
  reset_password_exp_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  username: () => Promise<AsyncIterator<String>>;
  hash: () => Promise<AsyncIterator<String>>;
  need_onboarding: () => Promise<AsyncIterator<Boolean>>;
  email_validated: () => Promise<AsyncIterator<Boolean>>;
  emailConfirmToken: () => Promise<AsyncIterator<String>>;
}

export interface ProjectRightSubscriptionPayload {
  mutation: MutationType;
  node: ProjectRight;
  updatedFields: String[];
  previousValues: ProjectRightPreviousValues;
}

export interface ProjectRightSubscriptionPayloadPromise
  extends Promise<ProjectRightSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectRightPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectRightPreviousValuesPromise>() => T;
}

export interface ProjectRightSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectRightSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectRightSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectRightPreviousValuesSubscription>() => T;
}

export interface ProjectEdge {
  node: Project;
  cursor: String;
}

export interface ProjectEdgePromise extends Promise<ProjectEdge>, Fragmentable {
  node: <T = ProjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectEdgeSubscription
  extends Promise<AsyncIterator<ProjectEdge>>,
    Fragmentable {
  node: <T = ProjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AccountSubscriptionPayload {
  mutation: MutationType;
  node: Account;
  updatedFields: String[];
  previousValues: AccountPreviousValues;
}

export interface AccountSubscriptionPayloadPromise
  extends Promise<AccountSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AccountPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AccountPreviousValuesPromise>() => T;
}

export interface AccountSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AccountSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AccountSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AccountPreviousValuesSubscription>() => T;
}

export interface ProjectRightPreviousValues {
  right: RIGHT;
}

export interface ProjectRightPreviousValuesPromise
  extends Promise<ProjectRightPreviousValues>,
    Fragmentable {
  right: () => Promise<RIGHT>;
}

export interface ProjectRightPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectRightPreviousValues>>,
    Fragmentable {
  right: () => Promise<AsyncIterator<RIGHT>>;
}

export interface AccountPreviousValues {
  id: ID_Output;
  clientId?: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  lastSeenAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
  reset_password_token?: String;
  reset_password_exp_date?: DateTimeOutput;
  username: String;
  hash: String;
  need_onboarding: Boolean;
  email_validated: Boolean;
  emailConfirmToken?: String;
}

export interface AccountPreviousValuesPromise
  extends Promise<AccountPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  clientId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  lastSeenAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  reset_password_token: () => Promise<String>;
  reset_password_exp_date: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
  hash: () => Promise<String>;
  need_onboarding: () => Promise<Boolean>;
  email_validated: () => Promise<Boolean>;
  emailConfirmToken: () => Promise<String>;
}

export interface AccountPreviousValuesSubscription
  extends Promise<AsyncIterator<AccountPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  clientId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastSeenAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  reset_password_token: () => Promise<AsyncIterator<String>>;
  reset_password_exp_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  username: () => Promise<AsyncIterator<String>>;
  hash: () => Promise<AsyncIterator<String>>;
  need_onboarding: () => Promise<AsyncIterator<Boolean>>;
  email_validated: () => Promise<AsyncIterator<Boolean>>;
  emailConfirmToken: () => Promise<AsyncIterator<String>>;
}

export interface PersonEdge {
  node: Person;
  cursor: String;
}

export interface PersonEdgePromise extends Promise<PersonEdge>, Fragmentable {
  node: <T = PersonPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PersonEdgeSubscription
  extends Promise<AsyncIterator<PersonEdge>>,
    Fragmentable {
  node: <T = PersonSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProjectRight {
  right: RIGHT;
}

export interface ProjectRightPromise
  extends Promise<ProjectRight>,
    Fragmentable {
  project: <T = ProjectPromise>() => T;
  right: () => Promise<RIGHT>;
  person: <T = PersonPromise>() => T;
}

export interface ProjectRightSubscription
  extends Promise<AsyncIterator<ProjectRight>>,
    Fragmentable {
  project: <T = ProjectSubscription>() => T;
  right: () => Promise<AsyncIterator<RIGHT>>;
  person: <T = PersonSubscription>() => T;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface SubmessageEdge {
  node: Submessage;
  cursor: String;
}

export interface SubmessageEdgePromise
  extends Promise<SubmessageEdge>,
    Fragmentable {
  node: <T = SubmessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface SubmessageEdgeSubscription
  extends Promise<AsyncIterator<SubmessageEdge>>,
    Fragmentable {
  node: <T = SubmessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MessagePreviousValues {
  id: ID_Output;
  clientId?: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  receivedAt?: DateTimeOutput;
  _projectId?: ID_Output;
  integration_url?: String;
  integration_id?: String;
  title: String;
  content: String;
  channel: CHANNEL;
  read: Boolean;
  updated: Boolean;
  archived: Boolean;
  processed: Boolean;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  clientId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  receivedAt: () => Promise<DateTimeOutput>;
  _projectId: () => Promise<ID_Output>;
  integration_url: () => Promise<String>;
  integration_id: () => Promise<String>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  channel: () => Promise<CHANNEL>;
  read: () => Promise<Boolean>;
  updated: () => Promise<Boolean>;
  archived: () => Promise<Boolean>;
  processed: () => Promise<Boolean>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  clientId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  receivedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  _projectId: () => Promise<AsyncIterator<ID_Output>>;
  integration_url: () => Promise<AsyncIterator<String>>;
  integration_id: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  channel: () => Promise<AsyncIterator<CHANNEL>>;
  read: () => Promise<AsyncIterator<Boolean>>;
  updated: () => Promise<AsyncIterator<Boolean>>;
  archived: () => Promise<AsyncIterator<Boolean>>;
  processed: () => Promise<AsyncIterator<Boolean>>;
}

export interface AggregateProjectRight {
  count: Int;
}

export interface AggregateProjectRightPromise
  extends Promise<AggregateProjectRight>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectRightSubscription
  extends Promise<AsyncIterator<AggregateProjectRight>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Person {
  id: ID_Output;
  clientId?: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  _projectId?: ID_Output;
  deleted: Boolean;
  type: PERSON_TYPE;
  name: String;
  email?: String;
  details?: String;
  phone?: String;
  zendesk_url?: String;
}

export interface PersonPromise extends Promise<Person>, Fragmentable {
  id: () => Promise<ID_Output>;
  clientId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  _projectId: () => Promise<ID_Output>;
  project: <T = ProjectPromise>() => T;
  right: <T = ProjectRightPromise>() => T;
  submitted_messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  requested_messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  cc_messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  account: <T = AccountPromise>() => T;
  deleted: () => Promise<Boolean>;
  type: () => Promise<PERSON_TYPE>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  details: () => Promise<String>;
  phone: () => Promise<String>;
  zendesk_url: () => Promise<String>;
}

export interface PersonSubscription
  extends Promise<AsyncIterator<Person>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  clientId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  _projectId: () => Promise<AsyncIterator<ID_Output>>;
  project: <T = ProjectSubscription>() => T;
  right: <T = ProjectRightSubscription>() => T;
  submitted_messages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  requested_messages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  cc_messages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  account: <T = AccountSubscription>() => T;
  deleted: () => Promise<AsyncIterator<Boolean>>;
  type: () => Promise<AsyncIterator<PERSON_TYPE>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  details: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  zendesk_url: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProject {
  count: Int;
}

export interface AggregateProjectPromise
  extends Promise<AggregateProject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectSubscription
  extends Promise<AsyncIterator<AggregateProject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PersonSubscriptionPayload {
  mutation: MutationType;
  node: Person;
  updatedFields: String[];
  previousValues: PersonPreviousValues;
}

export interface PersonSubscriptionPayloadPromise
  extends Promise<PersonSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PersonPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PersonPreviousValuesPromise>() => T;
}

export interface PersonSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PersonSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PersonSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PersonPreviousValuesSubscription>() => T;
}

export interface AggregatePerson {
  count: Int;
}

export interface AggregatePersonPromise
  extends Promise<AggregatePerson>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePersonSubscription
  extends Promise<AsyncIterator<AggregatePerson>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProjectPreviousValues {
  id: ID_Output;
  clientId?: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface ProjectPreviousValuesPromise
  extends Promise<ProjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  clientId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface ProjectPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  clientId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ProjectSubscriptionPayload {
  mutation: MutationType;
  node: Project;
  updatedFields: String[];
  previousValues: ProjectPreviousValues;
}

export interface ProjectSubscriptionPayloadPromise
  extends Promise<ProjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectPreviousValuesPromise>() => T;
}

export interface ProjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectPreviousValuesSubscription>() => T;
}

export interface Submessage {
  id: ID_Output;
  clientId?: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  receivedAt?: DateTimeOutput;
  integration_id?: String;
  type: MESSAGE_TYPE;
  content: String;
}

export interface SubmessagePromise extends Promise<Submessage>, Fragmentable {
  id: () => Promise<ID_Output>;
  clientId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  receivedAt: () => Promise<DateTimeOutput>;
  message: <T = MessagePromise>() => T;
  submitter: <T = PersonPromise>() => T;
  integration_id: () => Promise<String>;
  type: () => Promise<MESSAGE_TYPE>;
  content: () => Promise<String>;
}

export interface SubmessageSubscription
  extends Promise<AsyncIterator<Submessage>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  clientId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  receivedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  message: <T = MessageSubscription>() => T;
  submitter: <T = PersonSubscription>() => T;
  integration_id: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<MESSAGE_TYPE>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface PersonPreviousValues {
  id: ID_Output;
  clientId?: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  _projectId?: ID_Output;
  deleted: Boolean;
  type: PERSON_TYPE;
  name: String;
  email?: String;
  details?: String;
  phone?: String;
  zendesk_url?: String;
}

export interface PersonPreviousValuesPromise
  extends Promise<PersonPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  clientId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  _projectId: () => Promise<ID_Output>;
  deleted: () => Promise<Boolean>;
  type: () => Promise<PERSON_TYPE>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  details: () => Promise<String>;
  phone: () => Promise<String>;
  zendesk_url: () => Promise<String>;
}

export interface PersonPreviousValuesSubscription
  extends Promise<AsyncIterator<PersonPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  clientId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  _projectId: () => Promise<AsyncIterator<ID_Output>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
  type: () => Promise<AsyncIterator<PERSON_TYPE>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  details: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  zendesk_url: () => Promise<AsyncIterator<String>>;
}

export interface SubmessageSubscriptionPayload {
  mutation: MutationType;
  node: Submessage;
  updatedFields: String[];
  previousValues: SubmessagePreviousValues;
}

export interface SubmessageSubscriptionPayloadPromise
  extends Promise<SubmessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SubmessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SubmessagePreviousValuesPromise>() => T;
}

export interface SubmessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SubmessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SubmessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SubmessagePreviousValuesSubscription>() => T;
}

export interface PersonConnection {
  pageInfo: PageInfo;
  edges: PersonEdge[];
}

export interface PersonConnectionPromise
  extends Promise<PersonConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PersonEdge>>() => T;
  aggregate: <T = AggregatePersonPromise>() => T;
}

export interface PersonConnectionSubscription
  extends Promise<AsyncIterator<PersonConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PersonEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePersonSubscription>() => T;
}

export interface ProjectConnection {
  pageInfo: PageInfo;
  edges: ProjectEdge[];
}

export interface ProjectConnectionPromise
  extends Promise<ProjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectEdge>>() => T;
  aggregate: <T = AggregateProjectPromise>() => T;
}

export interface ProjectConnectionSubscription
  extends Promise<AsyncIterator<ProjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectSubscription>() => T;
}

export interface ProjectRightConnection {
  pageInfo: PageInfo;
  edges: ProjectRightEdge[];
}

export interface ProjectRightConnectionPromise
  extends Promise<ProjectRightConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectRightEdge>>() => T;
  aggregate: <T = AggregateProjectRightPromise>() => T;
}

export interface ProjectRightConnectionSubscription
  extends Promise<AsyncIterator<ProjectRightConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectRightEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectRightSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Account",
    embedded: false
  },
  {
    name: "CHANNEL",
    embedded: false
  },
  {
    name: "MESSAGE_TYPE",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  },
  {
    name: "PERSON_TYPE",
    embedded: false
  },
  {
    name: "Person",
    embedded: false
  },
  {
    name: "Project",
    embedded: false
  },
  {
    name: "ProjectRight",
    embedded: false
  },
  {
    name: "RIGHT",
    embedded: false
  },
  {
    name: "Submessage",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
